//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace LayoutEditor.DAL.ServiceReferenceLayouts {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ServiceReferenceLayouts.ServiceLayouts")]
    public interface ServiceLayouts {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ServiceLayouts/SaveUserFlags", ReplyAction="urn:ServiceLayouts/SaveUserFlagsResponse")]
        System.IAsyncResult BeginSaveUserFlags(string userId, long assayId, string flagCsv, string flaggedPositionHtml, System.AsyncCallback callback, object asyncState);
        
        void EndSaveUserFlags(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ServiceLayouts/LoadUserFlags", ReplyAction="urn:ServiceLayouts/LoadUserFlagsResponse")]
        System.IAsyncResult BeginLoadUserFlags(string userId, long assayId, System.AsyncCallback callback, object asyncState);
        
        string EndLoadUserFlags(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ServiceLayouts/GetFixedLayoutWithFlags", ReplyAction="urn:ServiceLayouts/GetFixedLayoutWithFlagsResponse")]
        System.IAsyncResult BeginGetFixedLayoutWithFlags(string userId, int fixedLayoutNum, long assayId, string previousRunId, System.AsyncCallback callback, object asyncState);
        
        string EndGetFixedLayoutWithFlags(out string flags, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ServiceLayouts/GetUserLayoutWithFlags", ReplyAction="urn:ServiceLayouts/GetUserLayoutWithFlagsResponse")]
        System.IAsyncResult BeginGetUserLayoutWithFlags(string userId, string userLayoutId, long assayId, string previousRunId, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserLayoutWithFlags(out string flags, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ServiceLayouts/GetUserLayout", ReplyAction="urn:ServiceLayouts/GetUserLayoutResponse")]
        System.IAsyncResult BeginGetUserLayout(string userId, string userLayoutId, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserLayout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ServiceLayouts/GetFixedLayout", ReplyAction="urn:ServiceLayouts/GetFixedLayoutResponse")]
        System.IAsyncResult BeginGetFixedLayout(long assayId, int fixedLayoutNum, System.AsyncCallback callback, object asyncState);
        
        string EndGetFixedLayout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ServiceLayouts/SaveUserLayout", ReplyAction="urn:ServiceLayouts/SaveUserLayoutResponse")]
        System.IAsyncResult BeginSaveUserLayout(string userId, string layoutId, string userLayoutXml, long assayId, System.AsyncCallback callback, object asyncState);
        
        string EndSaveUserLayout(out string typeGroupCountCSV, out int numUsedWellsFirstPlate, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiceLayoutsChannel : LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadUserFlagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadUserFlagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFixedLayoutWithFlagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFixedLayoutWithFlagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string flags {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserLayoutWithFlagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserLayoutWithFlagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string flags {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFixedLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFixedLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveUserLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveUserLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string typeGroupCountCSV {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public int numUsedWellsFirstPlate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceLayoutsClient : System.ServiceModel.ClientBase<LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts>, LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts {
        
        private BeginOperationDelegate onBeginSaveUserFlagsDelegate;
        
        private EndOperationDelegate onEndSaveUserFlagsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUserFlagsCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadUserFlagsDelegate;
        
        private EndOperationDelegate onEndLoadUserFlagsDelegate;
        
        private System.Threading.SendOrPostCallback onLoadUserFlagsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFixedLayoutWithFlagsDelegate;
        
        private EndOperationDelegate onEndGetFixedLayoutWithFlagsDelegate;
        
        private System.Threading.SendOrPostCallback onGetFixedLayoutWithFlagsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserLayoutWithFlagsDelegate;
        
        private EndOperationDelegate onEndGetUserLayoutWithFlagsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserLayoutWithFlagsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserLayoutDelegate;
        
        private EndOperationDelegate onEndGetUserLayoutDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserLayoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFixedLayoutDelegate;
        
        private EndOperationDelegate onEndGetFixedLayoutDelegate;
        
        private System.Threading.SendOrPostCallback onGetFixedLayoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUserLayoutDelegate;
        
        private EndOperationDelegate onEndSaveUserLayoutDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUserLayoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceLayoutsClient() {
        }
        
        public ServiceLayoutsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceLayoutsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLayoutsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLayoutsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveUserFlagsCompleted;
        
        public event System.EventHandler<LoadUserFlagsCompletedEventArgs> LoadUserFlagsCompleted;
        
        public event System.EventHandler<GetFixedLayoutWithFlagsCompletedEventArgs> GetFixedLayoutWithFlagsCompleted;
        
        public event System.EventHandler<GetUserLayoutWithFlagsCompletedEventArgs> GetUserLayoutWithFlagsCompleted;
        
        public event System.EventHandler<GetUserLayoutCompletedEventArgs> GetUserLayoutCompleted;
        
        public event System.EventHandler<GetFixedLayoutCompletedEventArgs> GetFixedLayoutCompleted;
        
        public event System.EventHandler<SaveUserLayoutCompletedEventArgs> SaveUserLayoutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.BeginSaveUserFlags(string userId, long assayId, string flagCsv, string flaggedPositionHtml, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUserFlags(userId, assayId, flagCsv, flaggedPositionHtml, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.EndSaveUserFlags(System.IAsyncResult result) {
            base.Channel.EndSaveUserFlags(result);
        }
        
        private System.IAsyncResult OnBeginSaveUserFlags(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            long assayId = ((long)(inValues[1]));
            string flagCsv = ((string)(inValues[2]));
            string flaggedPositionHtml = ((string)(inValues[3]));
            return ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).BeginSaveUserFlags(userId, assayId, flagCsv, flaggedPositionHtml, callback, asyncState);
        }
        
        private object[] OnEndSaveUserFlags(System.IAsyncResult result) {
            ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).EndSaveUserFlags(result);
            return null;
        }
        
        private void OnSaveUserFlagsCompleted(object state) {
            if ((this.SaveUserFlagsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUserFlagsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUserFlagsAsync(string userId, long assayId, string flagCsv, string flaggedPositionHtml) {
            this.SaveUserFlagsAsync(userId, assayId, flagCsv, flaggedPositionHtml, null);
        }
        
        public void SaveUserFlagsAsync(string userId, long assayId, string flagCsv, string flaggedPositionHtml, object userState) {
            if ((this.onBeginSaveUserFlagsDelegate == null)) {
                this.onBeginSaveUserFlagsDelegate = new BeginOperationDelegate(this.OnBeginSaveUserFlags);
            }
            if ((this.onEndSaveUserFlagsDelegate == null)) {
                this.onEndSaveUserFlagsDelegate = new EndOperationDelegate(this.OnEndSaveUserFlags);
            }
            if ((this.onSaveUserFlagsCompletedDelegate == null)) {
                this.onSaveUserFlagsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUserFlagsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUserFlagsDelegate, new object[] {
                        userId,
                        assayId,
                        flagCsv,
                        flaggedPositionHtml}, this.onEndSaveUserFlagsDelegate, this.onSaveUserFlagsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.BeginLoadUserFlags(string userId, long assayId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadUserFlags(userId, assayId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.EndLoadUserFlags(System.IAsyncResult result) {
            return base.Channel.EndLoadUserFlags(result);
        }
        
        private System.IAsyncResult OnBeginLoadUserFlags(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            long assayId = ((long)(inValues[1]));
            return ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).BeginLoadUserFlags(userId, assayId, callback, asyncState);
        }
        
        private object[] OnEndLoadUserFlags(System.IAsyncResult result) {
            string retVal = ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).EndLoadUserFlags(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadUserFlagsCompleted(object state) {
            if ((this.LoadUserFlagsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadUserFlagsCompleted(this, new LoadUserFlagsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadUserFlagsAsync(string userId, long assayId) {
            this.LoadUserFlagsAsync(userId, assayId, null);
        }
        
        public void LoadUserFlagsAsync(string userId, long assayId, object userState) {
            if ((this.onBeginLoadUserFlagsDelegate == null)) {
                this.onBeginLoadUserFlagsDelegate = new BeginOperationDelegate(this.OnBeginLoadUserFlags);
            }
            if ((this.onEndLoadUserFlagsDelegate == null)) {
                this.onEndLoadUserFlagsDelegate = new EndOperationDelegate(this.OnEndLoadUserFlags);
            }
            if ((this.onLoadUserFlagsCompletedDelegate == null)) {
                this.onLoadUserFlagsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadUserFlagsCompleted);
            }
            base.InvokeAsync(this.onBeginLoadUserFlagsDelegate, new object[] {
                        userId,
                        assayId}, this.onEndLoadUserFlagsDelegate, this.onLoadUserFlagsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.BeginGetFixedLayoutWithFlags(string userId, int fixedLayoutNum, long assayId, string previousRunId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFixedLayoutWithFlags(userId, fixedLayoutNum, assayId, previousRunId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.EndGetFixedLayoutWithFlags(out string flags, System.IAsyncResult result) {
            return base.Channel.EndGetFixedLayoutWithFlags(out flags, result);
        }
        
        private System.IAsyncResult OnBeginGetFixedLayoutWithFlags(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            int fixedLayoutNum = ((int)(inValues[1]));
            long assayId = ((long)(inValues[2]));
            string previousRunId = ((string)(inValues[3]));
            return ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).BeginGetFixedLayoutWithFlags(userId, fixedLayoutNum, assayId, previousRunId, callback, asyncState);
        }
        
        private object[] OnEndGetFixedLayoutWithFlags(System.IAsyncResult result) {
            string flags = this.GetDefaultValueForInitialization<string>();
            string retVal = ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).EndGetFixedLayoutWithFlags(out flags, result);
            return new object[] {
                    flags,
                    retVal};
        }
        
        private void OnGetFixedLayoutWithFlagsCompleted(object state) {
            if ((this.GetFixedLayoutWithFlagsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFixedLayoutWithFlagsCompleted(this, new GetFixedLayoutWithFlagsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFixedLayoutWithFlagsAsync(string userId, int fixedLayoutNum, long assayId, string previousRunId) {
            this.GetFixedLayoutWithFlagsAsync(userId, fixedLayoutNum, assayId, previousRunId, null);
        }
        
        public void GetFixedLayoutWithFlagsAsync(string userId, int fixedLayoutNum, long assayId, string previousRunId, object userState) {
            if ((this.onBeginGetFixedLayoutWithFlagsDelegate == null)) {
                this.onBeginGetFixedLayoutWithFlagsDelegate = new BeginOperationDelegate(this.OnBeginGetFixedLayoutWithFlags);
            }
            if ((this.onEndGetFixedLayoutWithFlagsDelegate == null)) {
                this.onEndGetFixedLayoutWithFlagsDelegate = new EndOperationDelegate(this.OnEndGetFixedLayoutWithFlags);
            }
            if ((this.onGetFixedLayoutWithFlagsCompletedDelegate == null)) {
                this.onGetFixedLayoutWithFlagsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFixedLayoutWithFlagsCompleted);
            }
            base.InvokeAsync(this.onBeginGetFixedLayoutWithFlagsDelegate, new object[] {
                        userId,
                        fixedLayoutNum,
                        assayId,
                        previousRunId}, this.onEndGetFixedLayoutWithFlagsDelegate, this.onGetFixedLayoutWithFlagsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.BeginGetUserLayoutWithFlags(string userId, string userLayoutId, long assayId, string previousRunId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserLayoutWithFlags(userId, userLayoutId, assayId, previousRunId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.EndGetUserLayoutWithFlags(out string flags, System.IAsyncResult result) {
            return base.Channel.EndGetUserLayoutWithFlags(out flags, result);
        }
        
        private System.IAsyncResult OnBeginGetUserLayoutWithFlags(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string userLayoutId = ((string)(inValues[1]));
            long assayId = ((long)(inValues[2]));
            string previousRunId = ((string)(inValues[3]));
            return ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).BeginGetUserLayoutWithFlags(userId, userLayoutId, assayId, previousRunId, callback, asyncState);
        }
        
        private object[] OnEndGetUserLayoutWithFlags(System.IAsyncResult result) {
            string flags = this.GetDefaultValueForInitialization<string>();
            string retVal = ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).EndGetUserLayoutWithFlags(out flags, result);
            return new object[] {
                    flags,
                    retVal};
        }
        
        private void OnGetUserLayoutWithFlagsCompleted(object state) {
            if ((this.GetUserLayoutWithFlagsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserLayoutWithFlagsCompleted(this, new GetUserLayoutWithFlagsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserLayoutWithFlagsAsync(string userId, string userLayoutId, long assayId, string previousRunId) {
            this.GetUserLayoutWithFlagsAsync(userId, userLayoutId, assayId, previousRunId, null);
        }
        
        public void GetUserLayoutWithFlagsAsync(string userId, string userLayoutId, long assayId, string previousRunId, object userState) {
            if ((this.onBeginGetUserLayoutWithFlagsDelegate == null)) {
                this.onBeginGetUserLayoutWithFlagsDelegate = new BeginOperationDelegate(this.OnBeginGetUserLayoutWithFlags);
            }
            if ((this.onEndGetUserLayoutWithFlagsDelegate == null)) {
                this.onEndGetUserLayoutWithFlagsDelegate = new EndOperationDelegate(this.OnEndGetUserLayoutWithFlags);
            }
            if ((this.onGetUserLayoutWithFlagsCompletedDelegate == null)) {
                this.onGetUserLayoutWithFlagsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserLayoutWithFlagsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserLayoutWithFlagsDelegate, new object[] {
                        userId,
                        userLayoutId,
                        assayId,
                        previousRunId}, this.onEndGetUserLayoutWithFlagsDelegate, this.onGetUserLayoutWithFlagsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.BeginGetUserLayout(string userId, string userLayoutId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserLayout(userId, userLayoutId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.EndGetUserLayout(System.IAsyncResult result) {
            return base.Channel.EndGetUserLayout(result);
        }
        
        private System.IAsyncResult OnBeginGetUserLayout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string userLayoutId = ((string)(inValues[1]));
            return ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).BeginGetUserLayout(userId, userLayoutId, callback, asyncState);
        }
        
        private object[] OnEndGetUserLayout(System.IAsyncResult result) {
            string retVal = ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).EndGetUserLayout(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserLayoutCompleted(object state) {
            if ((this.GetUserLayoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserLayoutCompleted(this, new GetUserLayoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserLayoutAsync(string userId, string userLayoutId) {
            this.GetUserLayoutAsync(userId, userLayoutId, null);
        }
        
        public void GetUserLayoutAsync(string userId, string userLayoutId, object userState) {
            if ((this.onBeginGetUserLayoutDelegate == null)) {
                this.onBeginGetUserLayoutDelegate = new BeginOperationDelegate(this.OnBeginGetUserLayout);
            }
            if ((this.onEndGetUserLayoutDelegate == null)) {
                this.onEndGetUserLayoutDelegate = new EndOperationDelegate(this.OnEndGetUserLayout);
            }
            if ((this.onGetUserLayoutCompletedDelegate == null)) {
                this.onGetUserLayoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserLayoutCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserLayoutDelegate, new object[] {
                        userId,
                        userLayoutId}, this.onEndGetUserLayoutDelegate, this.onGetUserLayoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.BeginGetFixedLayout(long assayId, int fixedLayoutNum, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFixedLayout(assayId, fixedLayoutNum, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.EndGetFixedLayout(System.IAsyncResult result) {
            return base.Channel.EndGetFixedLayout(result);
        }
        
        private System.IAsyncResult OnBeginGetFixedLayout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long assayId = ((long)(inValues[0]));
            int fixedLayoutNum = ((int)(inValues[1]));
            return ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).BeginGetFixedLayout(assayId, fixedLayoutNum, callback, asyncState);
        }
        
        private object[] OnEndGetFixedLayout(System.IAsyncResult result) {
            string retVal = ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).EndGetFixedLayout(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFixedLayoutCompleted(object state) {
            if ((this.GetFixedLayoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFixedLayoutCompleted(this, new GetFixedLayoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFixedLayoutAsync(long assayId, int fixedLayoutNum) {
            this.GetFixedLayoutAsync(assayId, fixedLayoutNum, null);
        }
        
        public void GetFixedLayoutAsync(long assayId, int fixedLayoutNum, object userState) {
            if ((this.onBeginGetFixedLayoutDelegate == null)) {
                this.onBeginGetFixedLayoutDelegate = new BeginOperationDelegate(this.OnBeginGetFixedLayout);
            }
            if ((this.onEndGetFixedLayoutDelegate == null)) {
                this.onEndGetFixedLayoutDelegate = new EndOperationDelegate(this.OnEndGetFixedLayout);
            }
            if ((this.onGetFixedLayoutCompletedDelegate == null)) {
                this.onGetFixedLayoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFixedLayoutCompleted);
            }
            base.InvokeAsync(this.onBeginGetFixedLayoutDelegate, new object[] {
                        assayId,
                        fixedLayoutNum}, this.onEndGetFixedLayoutDelegate, this.onGetFixedLayoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.BeginSaveUserLayout(string userId, string layoutId, string userLayoutXml, long assayId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUserLayout(userId, layoutId, userLayoutXml, assayId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts.EndSaveUserLayout(out string typeGroupCountCSV, out int numUsedWellsFirstPlate, System.IAsyncResult result) {
            return base.Channel.EndSaveUserLayout(out typeGroupCountCSV, out numUsedWellsFirstPlate, result);
        }
        
        private System.IAsyncResult OnBeginSaveUserLayout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string layoutId = ((string)(inValues[1]));
            string userLayoutXml = ((string)(inValues[2]));
            long assayId = ((long)(inValues[3]));
            return ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).BeginSaveUserLayout(userId, layoutId, userLayoutXml, assayId, callback, asyncState);
        }
        
        private object[] OnEndSaveUserLayout(System.IAsyncResult result) {
            string typeGroupCountCSV = this.GetDefaultValueForInitialization<string>();
            int numUsedWellsFirstPlate = this.GetDefaultValueForInitialization<int>();
            string retVal = ((LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts)(this)).EndSaveUserLayout(out typeGroupCountCSV, out numUsedWellsFirstPlate, result);
            return new object[] {
                    typeGroupCountCSV,
                    numUsedWellsFirstPlate,
                    retVal};
        }
        
        private void OnSaveUserLayoutCompleted(object state) {
            if ((this.SaveUserLayoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUserLayoutCompleted(this, new SaveUserLayoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUserLayoutAsync(string userId, string layoutId, string userLayoutXml, long assayId) {
            this.SaveUserLayoutAsync(userId, layoutId, userLayoutXml, assayId, null);
        }
        
        public void SaveUserLayoutAsync(string userId, string layoutId, string userLayoutXml, long assayId, object userState) {
            if ((this.onBeginSaveUserLayoutDelegate == null)) {
                this.onBeginSaveUserLayoutDelegate = new BeginOperationDelegate(this.OnBeginSaveUserLayout);
            }
            if ((this.onEndSaveUserLayoutDelegate == null)) {
                this.onEndSaveUserLayoutDelegate = new EndOperationDelegate(this.OnEndSaveUserLayout);
            }
            if ((this.onSaveUserLayoutCompletedDelegate == null)) {
                this.onSaveUserLayoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUserLayoutCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUserLayoutDelegate, new object[] {
                        userId,
                        layoutId,
                        userLayoutXml,
                        assayId}, this.onEndSaveUserLayoutDelegate, this.onSaveUserLayoutCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts CreateChannel() {
            return new ServiceLayoutsClientChannel(this);
        }
        
        private class ServiceLayoutsClientChannel : ChannelBase<LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts>, LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts {
            
            public ServiceLayoutsClientChannel(System.ServiceModel.ClientBase<LayoutEditor.DAL.ServiceReferenceLayouts.ServiceLayouts> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSaveUserFlags(string userId, long assayId, string flagCsv, string flaggedPositionHtml, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = assayId;
                _args[2] = flagCsv;
                _args[3] = flaggedPositionHtml;
                System.IAsyncResult _result = base.BeginInvoke("SaveUserFlags", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSaveUserFlags(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SaveUserFlags", _args, result);
            }
            
            public System.IAsyncResult BeginLoadUserFlags(string userId, long assayId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = assayId;
                System.IAsyncResult _result = base.BeginInvoke("LoadUserFlags", _args, callback, asyncState);
                return _result;
            }
            
            public string EndLoadUserFlags(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("LoadUserFlags", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFixedLayoutWithFlags(string userId, int fixedLayoutNum, long assayId, string previousRunId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = fixedLayoutNum;
                _args[2] = assayId;
                _args[3] = previousRunId;
                System.IAsyncResult _result = base.BeginInvoke("GetFixedLayoutWithFlags", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetFixedLayoutWithFlags(out string flags, System.IAsyncResult result) {
                object[] _args = new object[1];
                string _result = ((string)(base.EndInvoke("GetFixedLayoutWithFlags", _args, result)));
                flags = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserLayoutWithFlags(string userId, string userLayoutId, long assayId, string previousRunId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = userLayoutId;
                _args[2] = assayId;
                _args[3] = previousRunId;
                System.IAsyncResult _result = base.BeginInvoke("GetUserLayoutWithFlags", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUserLayoutWithFlags(out string flags, System.IAsyncResult result) {
                object[] _args = new object[1];
                string _result = ((string)(base.EndInvoke("GetUserLayoutWithFlags", _args, result)));
                flags = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserLayout(string userId, string userLayoutId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = userLayoutId;
                System.IAsyncResult _result = base.BeginInvoke("GetUserLayout", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUserLayout(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetUserLayout", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFixedLayout(long assayId, int fixedLayoutNum, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = assayId;
                _args[1] = fixedLayoutNum;
                System.IAsyncResult _result = base.BeginInvoke("GetFixedLayout", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetFixedLayout(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetFixedLayout", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveUserLayout(string userId, string layoutId, string userLayoutXml, long assayId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = layoutId;
                _args[2] = userLayoutXml;
                _args[3] = assayId;
                System.IAsyncResult _result = base.BeginInvoke("SaveUserLayout", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveUserLayout(out string typeGroupCountCSV, out int numUsedWellsFirstPlate, System.IAsyncResult result) {
                object[] _args = new object[2];
                string _result = ((string)(base.EndInvoke("SaveUserLayout", _args, result)));
                typeGroupCountCSV = ((string)(_args[0]));
                numUsedWellsFirstPlate = ((int)(_args[1]));
                return _result;
            }
        }
    }
}
